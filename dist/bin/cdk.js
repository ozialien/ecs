#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const ecs_service_stack_1 = require("../lib/ecs-service-stack");
/**
 * CDK App Entry Point
 *
 * Uses CDK's native context parameters (-c) for configuration
 *
 * Usage:
 *   # Context parameters only
 *   cdk deploy -c vpcId=vpc-12345678 -c image=nginx:alpine
 *
 *   # With values file (Helm-style)
 *   cdk deploy -c valuesFile=values.yaml
 */
const app = new cdk.App();
// Start with empty config
let config = {};
// 1. Load from values file FIRST if specified
const valuesFile = app.node.tryGetContext('valuesFile');
if (valuesFile) {
    const fs = require('fs');
    const path = require('path');
    if (fs.existsSync(valuesFile)) {
        try {
            const fileContent = fs.readFileSync(valuesFile, 'utf8');
            const ext = path.extname(valuesFile).toLowerCase();
            let values;
            switch (ext) {
                case '.js':
                    values = require(path.resolve(valuesFile));
                    break;
                case '.yaml':
                case '.yml':
                    const yaml = require('js-yaml');
                    values = yaml.load(fileContent);
                    break;
                default:
                    values = JSON.parse(fileContent);
            }
            // Load values file into config
            config = { ...config, ...values };
            console.log(`üìÑ Loaded values from: ${valuesFile}`);
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è  Warning: Failed to parse values file ${valuesFile}: ${error}`);
        }
    }
    else {
        console.warn(`‚ö†Ô∏è  Warning: Values file not found: ${valuesFile}`);
    }
}
// 2. Override with context parameters (highest precedence)
const contextOverrides = {
    vpcId: app.node.tryGetContext('vpcId'),
    subnetIds: app.node.tryGetContext('subnetIds')?.split(','),
    clusterName: app.node.tryGetContext('clusterName'),
    image: app.node.tryGetContext('image'),
    stackName: app.node.tryGetContext('stackName'),
    desiredCount: app.node.tryGetContext('desiredCount'),
    cpu: app.node.tryGetContext('cpu'),
    memory: app.node.tryGetContext('memory'),
    containerPort: app.node.tryGetContext('containerPort'),
    lbPort: app.node.tryGetContext('lbPort'),
    healthCheckPath: app.node.tryGetContext('healthCheckPath'),
    allowedCidr: app.node.tryGetContext('allowedCidr'),
    environment: app.node.tryGetContext('env'),
    secrets: app.node.tryGetContext('secret'),
    logGroupName: app.node.tryGetContext('logGroupName'),
    logRetentionDays: app.node.tryGetContext('logRetentionDays'),
    enableAutoScaling: app.node.tryGetContext('enableAutoScaling'),
    minCapacity: app.node.tryGetContext('minCapacity'),
    maxCapacity: app.node.tryGetContext('maxCapacity'),
    targetCpuUtilization: app.node.tryGetContext('targetCpuUtilization'),
    targetMemoryUtilization: app.node.tryGetContext('targetMemoryUtilization'),
    taskExecutionRoleArn: app.node.tryGetContext('taskExecutionRoleArn'),
    taskRoleArn: app.node.tryGetContext('taskRoleArn'),
    taskRolePermissions: app.node.tryGetContext('taskRolePermissions'),
    taskExecutionRolePermissions: app.node.tryGetContext('taskExecutionRolePermissions'),
};
// Apply context overrides (only if they exist)
Object.entries(contextOverrides).forEach(([key, value]) => {
    if (value !== undefined) {
        config[key] = value;
    }
});
// 3. Fall back to environment variables (lowest precedence)
const finalConfig = {
    vpcId: config.vpcId || process.env.VPC_ID || '',
    subnetIds: config.subnetIds || process.env.SUBNET_IDS?.split(',') || [],
    clusterName: config.clusterName || process.env.CLUSTER_NAME || '',
    image: config.image || process.env.IMAGE || '',
    stackName: config.stackName || process.env.STACK_NAME || '',
    desiredCount: config.desiredCount || parseInt(process.env.DESIRED_COUNT || '1'),
    cpu: config.cpu || parseInt(process.env.CPU || '256'),
    memory: config.memory || parseInt(process.env.MEMORY || '512'),
    containerPort: config.containerPort || parseInt(process.env.CONTAINER_PORT || ''),
    lbPort: config.lbPort || parseInt(process.env.LB_PORT || ''),
    healthCheckPath: config.healthCheckPath || process.env.HEALTH_CHECK_PATH || '/',
    allowedCidr: config.allowedCidr || process.env.ALLOWED_CIDR || '0.0.0.0/0',
    environment: config.environment || {},
    secrets: config.secrets || {},
    logGroupName: config.logGroupName || process.env.LOG_GROUP_NAME,
    logRetentionDays: config.logRetentionDays || parseInt(process.env.LOG_RETENTION_DAYS || '7'),
    enableAutoScaling: config.enableAutoScaling || process.env.ENABLE_AUTO_SCALING === 'true',
    minCapacity: config.minCapacity || parseInt(process.env.MIN_CAPACITY || '1'),
    maxCapacity: config.maxCapacity || parseInt(process.env.MAX_CAPACITY || '3'),
    targetCpuUtilization: config.targetCpuUtilization || parseInt(process.env.TARGET_CPU_UTILIZATION || '70'),
    targetMemoryUtilization: config.targetMemoryUtilization || parseInt(process.env.TARGET_MEMORY_UTILIZATION || '70'),
    taskExecutionRoleArn: config.taskExecutionRoleArn || process.env.TASK_EXECUTION_ROLE_ARN,
    taskRoleArn: config.taskRoleArn || process.env.TASK_ROLE_ARN,
    taskRolePermissions: config.taskRolePermissions,
    taskExecutionRolePermissions: config.taskExecutionRolePermissions,
};
// Validate required parameters
const requiredParams = ['vpcId', 'subnetIds', 'clusterName', 'image', 'stackName', 'containerPort', 'lbPort'];
for (const param of requiredParams) {
    if (!finalConfig[param]) {
        console.error(`‚ùå Error: Required parameter '${param}' is missing.`);
        console.error('   Use -c parameter, values file, or set environment variable.');
        console.error('');
        console.error('Examples:');
        console.error('  cdk deploy -c vpcId=vpc-12345678 -c image=nginx:alpine');
        console.error('  cdk deploy -c valuesFile=values.yaml');
        process.exit(1);
    }
}
// Create the ECS service stack using stack name
new ecs_service_stack_1.EcsServiceStack(app, finalConfig.stackName, {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION,
    },
    config: finalConfig,
});
app.synth();
//# sourceMappingURL=data:application/json;base64,